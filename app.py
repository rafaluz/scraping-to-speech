# scraping_to_speech/app.py

import streamlit as st
import time
import os
import shutil
from utils.scraper import gerar_audio_partes, limpar_audios
from zipfile import ZipFile

st.set_page_config(page_title="Scraping to Speech", layout="wide")
st.title("üéôÔ∏è Scraping to Speech")

# Estado da sess√£o
if "arquivos" not in st.session_state:
    st.session_state.arquivos = []

# Lista de vozes dispon√≠veis
vozes_disponiveis = [
    "Alloy", "Ash", "Ballad", "Coral", "Echo", "Fable",
    "Onyx", "Nova", "Sage", "Shimmer", "Verse"
]


# Inputs do usu√°rio organizados lado a lado
col1, col2 = st.columns([3, 2])
with col1:
    prompt = st.text_area("üìù Prompt", height=400)
with col2:
    instructions = st.text_area("üß≠ Instructions", value="""
Voice Style:
Grave, fluida e expressiva, com entona√ß√µes que refor√ßam os pontos de maior impacto. Voz firme, como a de um rep√≥rter experiente, que passa autoridade e clareza ao narrar fatos relevantes. Deve transmitir seriedade, mas tamb√©m indigna√ß√£o contida nos momentos certos, tocando o espectador com emo√ß√£o genu√≠na, sem exageros.

Sotaque:
Brasileiro, com leve sotaque do Nordeste, preferencialmente do Piau√≠, conferindo autenticidade e conex√£o popular √† narrativa.

Punctuation:
Pontua√ß√£o clara, com pausas estrat√©gicas que reforcem a compreens√£o e a gravidade dos temas tratados. As pausas devem valorizar nomes, n√∫meros e dados impactantes.

Delivery:
S√≥lido, direto e envolvente. Deve manter um ritmo constante, com varia√ß√µes naturais para destacar trechos mais graves ou emocionantes. A voz deve segurar a aten√ß√£o do p√∫blico como uma reportagem de TV que revela um esc√¢ndalo nacional.

Phrasing:
Objetivo, com linguagem acess√≠vel, mas firme. Evitar jarg√µes t√©cnicos, priorizando express√µes de f√°cil compreens√£o. Quando necess√°rio, incluir frases que provoquem reflex√£o ou indigna√ß√£o no ouvinte.

Tone:
S√©rio e engajado, transmitindo o peso das den√∫ncias com responsabilidade e humanidade. De tempos em tempos, uma leve emo√ß√£o na voz deve refletir empatia pelas v√≠timas e urg√™ncia na cobran√ßa de justi√ßa.
""", height=400)

# voice = st.text_input("üé§ Voice (default: Ash)", value="Ash")
voice = st.selectbox("üé§ Escolha a voz", options=vozes_disponiveis, index=1)


if st.button("üîä Gerar Voz"):
    if prompt.strip() == "":
        st.error("O prompt n√£o pode estar vazio.")
    else:
        limpar_audios()
        with st.spinner("Gerando √°udio..."):
            arquivos = gerar_audio_partes(prompt, instructions, voice)
        if arquivos:
            st.session_state.arquivos = arquivos
            st.success("‚úÖ √Åudios gerados com sucesso!")
        else:
            st.error("N√£o foi poss√≠vel gerar os √°udios.")

# Mostrar √°udios e bot√£o de download zip
if st.session_state.arquivos:
    for arquivo in st.session_state.arquivos:
        st.audio(arquivo)

    zip_path = "audios_gerados.zip"
    with ZipFile(zip_path, 'w') as zipf:
        for i, arquivo in enumerate(st.session_state.arquivos, 1):
            zipf.write(arquivo, arcname=f"audio{i}.wav")

    with open(zip_path, "rb") as f:
        st.download_button("üì¶ Baixar todos os √°udios", data=f, file_name="audios_gerados.zip", mime="application/zip")

if st.button("üßπ Limpar Arquivos Tempor√°rios"):
    limpar_audios()
    st.session_state.arquivos = []
    st.success("Arquivos de √°udio tempor√°rios foram removidos com sucesso!")